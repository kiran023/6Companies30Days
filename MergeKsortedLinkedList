#include<bits/stdc++.h>
using namespace std;

struct ListNode {
     int val;
     ListNode *next;
     ListNode() : val(0), next(nullptr) {}
     ListNode(int x) : val(x), next(nullptr) {}
     ListNode(int x, ListNode *next) : val(x), next(next) {}
};
class Solution {
public:
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        int n=lists.size();
        if(n==0)
        return NULL;
        if(n==1)
        return lists[0];

        vector<ListNode*> temp=lists;
        ListNode * head=NULL;
        ListNode *mover=NULL;
        while(1){
            int ind=0;
            int mini=INT_MAX;
            for(int i=0;i<n;i++){
                if(temp[i]!=NULL && mini>temp[i]->val){
                    mini=temp[i]->val;
                    ind=i;
                }
            }
            if(mini==INT_MAX)
            break;
            if(mover==NULL){
                head=new ListNode(temp[ind]->val);
                mover=head;
            }
            else{
                mover->next=new ListNode(temp[ind]->val);
                mover=mover->next;
            }
            temp[ind]=temp[ind]->next;
            
        }
        return head;
    }
};